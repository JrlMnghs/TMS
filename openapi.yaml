openapi: 3.0.3
info:
  title: Translation Management Service API
  description: |
    A comprehensive API for managing translation keys, values, and locales in a multi-language application.
    
    ## Features
    - **Authentication**: Secure login/logout with Laravel Sanctum
    - **Translation Management**: CRUD operations for translation keys and values
    - **Export Functionality**: Export translations by locale with optional tag filtering
    - **User Management**: User listing and profile management
    - **Search & Filtering**: Advanced search with tags, keys, and text queries
    
    ## Performance
    - Optimized database queries with proper indexing
    - Streaming exports for large datasets
    - Sub-500ms response times for export operations
    
    ## API Versioning
    This is version 1 of the API. All endpoints are prefixed with `/api/v1/`.
    
    ## Rate Limiting
    API endpoints are rate-limited for security. Contact support for higher limits.
    
    ## Authentication
    Most endpoints require authentication. Use the login endpoint to obtain a Bearer token.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Local Development
  - url: https://api.example.com/api/v1
    description: Production

security:
  - BearerAuth: []

paths:
  /login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Authenticate user and obtain access token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              basic:
                summary: Basic Login
                value:
                  email: "test@example.com"
                  password: "password"
                  device: "postman"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  summary: Successful Login
                  value:
                    success: true
                    message: "Login successful"
                    token: "1|abc123def456..."
                    user:
                      id: 1
                      name: "Test User"
                      email: "test@example.com"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /logout:
    post:
      tags:
        - Authentication
      summary: User Logout
      description: Invalidate current access token
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: List Users
      description: Retrieve paginated list of users
      operationId: listUsers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get User by ID
      description: Retrieve user details by ID
      operationId: getUserById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /translations:
    get:
      tags:
        - Translations
      summary: List/Search Translations
      description: |
        Retrieve translations with advanced filtering and search capabilities.
        
        **Filtering Options:**
        - `tags`: Filter by one or more tags (comma-separated)
        - `locale`: Filter by specific locale code
        - `key`: Filter by translation key prefix
        - `q`: Full-text search in translation values
        - `status`: Filter by approval status
      operationId: listTranslations
      security:
        - BearerAuth: []
      parameters:
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          required: false
          schema:
            type: string
          example: "auth,web"
        - name: locale
          in: query
          description: Filter by locale code
          required: false
          schema:
            type: string
          example: "en"
        - name: key
          in: query
          description: Filter by translation key prefix
          required: false
          schema:
            type: string
          example: "auth."
        - name: q
          in: query
          description: Full-text search query
          required: false
          schema:
            type: string
          example: "Login"
        - name: status
          in: query
          description: Filter by approval status
          required: false
          schema:
            type: string
            enum: [pending, approved, rejected]
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Translations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationListResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

    post:
      tags:
        - Translations
      summary: Create Translation
      description: Create a new translation key with values
      operationId: createTranslation
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTranslationRequest'
            examples:
              basic:
                summary: Basic Translation
                value:
                  key_name: "auth.login.title"
                  tags: ["auth", "web"]
                  values:
                    en: "Login"
                    fr: "Connexion"
              complex:
                summary: Complex Translation with Multiple Locales
                value:
                  key_name: "dashboard.welcome.message"
                  tags: ["dashboard", "user"]
                  values:
                    en: "Welcome back, {{name}}!"
                    fr: "Bon retour, {{name}} !"
                    es: "Â¡Bienvenido de vuelta, {{name}}!"
      responses:
        '201':
          description: Translation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /translations/{id}:
    get:
      tags:
        - Translations
      summary: Get Translation by ID
      description: Retrieve translation details by ID
      operationId: getTranslationById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Translation ID
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Translation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Translation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Translations
      summary: Update Translation
      description: Update an existing translation
      operationId: updateTranslation
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Translation ID
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTranslationRequest'
      responses:
        '200':
          description: Translation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Translation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

    delete:
      tags:
        - Translations
      summary: Delete Translation
      description: Delete a translation
      operationId: deleteTranslation
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Translation ID
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Translation deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Translation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /export/{locale}:
    get:
      tags:
        - Export
      summary: Export Translations by Locale
      description: |
        Export all translations for a specific locale.
        
        **Performance Features:**
        - Optimized database queries with proper indexing
        - Sub-500ms response times
        - Efficient tag filtering using EXISTS clauses
        
        **Export Format:**
        - JSON format with nested structure
        - Includes translation keys, values, and metadata
        - Optional tag filtering for subset exports
      operationId: exportByLocale
      security:
        - BearerAuth: []
      parameters:
        - name: locale
          in: path
          description: Locale code to export
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 5
          example: "en"
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          required: false
          schema:
            type: string
          example: "auth,web"
        - name: format
          in: query
          description: Export format
          required: false
          schema:
            type: string
            enum: [json, csv]
            default: json
      responses:
        '200':
          description: Export successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportResponse'
            text/csv:
              schema:
                type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Locale not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /export/{locale}/stream:
    get:
      tags:
        - Export
      summary: Stream Export by Locale
      description: |
        Stream export for large datasets to avoid memory issues.
        
        **Streaming Benefits:**
        - Memory-efficient for large exports
        - Real-time data streaming
        - Suitable for datasets with thousands of translations
      operationId: streamExportByLocale
      security:
        - BearerAuth: []
      parameters:
        - name: locale
          in: path
          description: Locale code to export
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 5
          example: "en"
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          required: false
          schema:
            type: string
          example: "auth,web"
        - name: chunk_size
          in: query
          description: Number of records per chunk
          required: false
          schema:
            type: integer
            minimum: 100
            maximum: 10000
            default: 1000
      responses:
        '200':
          description: Stream export successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TranslationExportItem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Locale not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Use the token received from the login endpoint.
        Include it in the Authorization header as: `Bearer {token}`

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "test@example.com"
        password:
          type: string
          minLength: 6
          description: User password
          example: "password"
        device:
          type: string
          description: Device identifier for token management
          example: "postman"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        token:
          type: string
          description: Bearer token for authentication
          example: "1|abc123def456..."
        user:
          $ref: '#/components/schemas/User'

    # User Schemas
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Test User"
        email:
          type: string
          format: email
          example: "test@example.com"
        email_verified_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'

    UserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/User'

    # Translation Schemas
    TranslationKey:
      type: object
      properties:
        id:
          type: integer
          example: 1
        key_name:
          type: string
          description: Unique identifier for the translation key
          example: "auth.login.title"
        status:
          type: string
          enum: [pending, approved, rejected]
          default: "pending"
          example: "approved"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        translations:
          type: array
          items:
            $ref: '#/components/schemas/Translation'

    Translation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        translation_key_id:
          type: integer
          example: 1
        locale_id:
          type: integer
          example: 1
        value:
          type: string
          description: Translated text value
          example: "Login"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        locale:
          $ref: '#/components/schemas/Locale'

    Locale:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          minLength: 2
          maxLength: 5
          example: "en"
        name:
          type: string
          example: "English"
        is_active:
          type: boolean
          default: true
          example: true

    Tag:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "auth"
        color:
          type: string
          example: "#3B82F6"

    CreateTranslationRequest:
      type: object
      required:
        - key_name
        - values
      properties:
        key_name:
          type: string
          description: Unique identifier for the translation key
          example: "auth.login.title"
          pattern: '^[a-z][a-z0-9._-]*$'
        tags:
          type: array
          items:
            type: string
          description: Array of tag names
          example: ["auth", "web"]
        values:
          type: object
          description: Key-value pairs of locale code and translation value
          additionalProperties:
            type: string
          example:
            en: "Login"
            fr: "Connexion"

    UpdateTranslationRequest:
      type: object
      properties:
        key_name:
          type: string
          description: New key name (optional)
          example: "auth.login.title"
          pattern: '^[a-z][a-z0-9._-]*$'
        tags:
          type: array
          items:
            type: string
          description: New array of tag names (optional)
          example: ["auth"]
        values:
          type: object
          description: Key-value pairs of locale code and translation value (optional)
          additionalProperties:
            type: string
          example:
            en: "Log in"

    TranslationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/TranslationKey'

    TranslationListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/TranslationKey'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Export Schemas
    TranslationExportItem:
      type: object
      properties:
        key_name:
          type: string
          example: "auth.login.title"
        value:
          type: string
          example: "Login"
        tags:
          type: array
          items:
            type: string
          example: ["auth", "web"]
        status:
          type: string
          example: "approved"
        created_at:
          type: string
          format: date-time

    ExportResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TranslationExportItem'
        metadata:
          type: object
          properties:
            locale:
              type: string
              example: "en"
            total_keys:
              type: integer
              example: 150
            exported_at:
              type: string
              format: date-time
            filters:
              type: object
              properties:
                tags:
                  type: array
                  items:
                    type: string
                  example: ["auth", "web"]

    # Common Schemas
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        last_page:
          type: integer
          example: 5
        per_page:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        from:
          type: integer
          example: 1
        to:
          type: integer
          example: 20

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "An error occurred"
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            field: ["This field is required"]

    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            message:
              example: "Validation failed"
            errors:
              example:
                key_name: ["The key name field is required."]
                values: ["At least one translation value is required."]

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Users
    description: User management operations
  - name: Translations
    description: Translation key and value management
  - name: Export
    description: Export functionality for translations

externalDocs:
  description: Find more info about Translation Management Service
  url: https://github.com/example/translation-management-service
